Round 1:
machine coding questions
    Capitalize first letter of each word in a given string (prototype way)
    
    infinite currying of sum(1)(2)(3)(4)....
    const sum = (x) => {
        return (y)=>{
            if(y) {
                return sum(x+y);
            } else {
                return x;
            }
        }
    }
    or in simple words
    const sum = x => y => y ? sum(x+y) : x;
    console.log(sum(1)(2)(3)(4)()); //10
    
    sum = (a) => a+1;
    multiply = (b) => a*2;
    pipe(sum, multiply)


New features in HTML
name properties of video tag
difference between pseudo classes vs pseudo elements

Closures in js
function currying in JS
ES6 features

aggregation in mongodb

Buffer in NodeJS
Streams in NodeJS (how many streams?)

hooks used in React
state vs props
features of React


Round 2:
how rendering works in browser? html/css/js import => browser dimensions measurement => dom painting => content loaded
React code => focus on element when button clicked but do not expose other api's related to that element
(useRef + useImperativeHandle hook)
how useState works behind the scenes?
What is react fiber?
why hooks are written at the top level?
why can't we use hooks conditionally?
microtask and macrotask queue (priority of it)
how event loop is different in NodeJS as compared to browser. 
NodeJS code => read from a file and write (perform filter operations) to another file using streams.
Which all design patterns I have used in my code?





  









